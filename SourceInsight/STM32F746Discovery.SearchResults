---- ERROR Matches (2111 in 124 files) ----
Debug_output.h (src\common):#define DEBUG_STRING_LEVEL_ERROR
Debug_output.h (src\common):#if defined(DEBUG_STRING_LEVEL_ERROR)
Debug_output.h (src\common):         printf("[%06d.%03d:%s-%s-%d-ERROR] " fmt,                               \
Lcd_log.c (src):        return ERROR;
Lcd_log.c (src):        return ERROR;
Lcd_log.c (src):        return ERROR;
Lcd_log.c (src):          return ERROR;
Lcd_log.c (src):    return ERROR;
Lcd_log.h (inc):   ERROR                                                 = 0,
Lcd_log.h (inc):   SUCCESS                                               = !ERROR
Lcd_log.h (inc):                                 printf("ERROR: ") ;\
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    tmp_hal_status = HAL_ERROR;
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):  *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):  hadc->State= HAL_ADC_STATE_ERROR_DMA;
Stm32f7xx_hal_adc.c (drivers\stm32f7xx_hal_driver\src):  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    tmp_hal_status = HAL_ERROR;
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    tmp_hal_status = HAL_ERROR;
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):      ADC_CLEAR_ERRORCODE(hadc);
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    hadc->State= HAL_ADC_STATE_ERROR_DMA;
Stm32f7xx_hal_adc_ex.c (drivers\stm32f7xx_hal_driver\src):    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->State = HAL_CAN_STATE_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->State = HAL_CAN_STATE_ERROR; 
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->State = HAL_CAN_STATE_ERROR; 
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorcode = HAL_CAN_ERROR_NONE;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    errorcode |= HAL_CAN_ERROR_FOV0;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    errorcode |= HAL_CAN_ERROR_FOV1;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):        errorcode |= HAL_CAN_ERROR_TXFAIL;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
Stm32f7xx_hal_can.c (drivers\stm32f7xx_hal_driver\src):  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):  HAL_CAN_STATE_ERROR             = 0x04U   /*!< CAN error state                     */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_NONE      0x00000000U    /*!< No error             */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_EWG       0x00000001U    /*!< EWG error            */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_EPV       0x00000002U    /*!< EPV error            */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_BOF       0x00000004U    /*!< BOF error            */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_STF       0x00000008U    /*!< Stuff error          */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_FOR       0x00000010U    /*!< Form error           */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_ACK       0x00000020U    /*!< Acknowledgment error */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_BR        0x00000040U    /*!< Bit recessive        */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_BD        0x00000080U    /*!< LEC dominant         */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_CRC       0x00000100U    /*!< LEC transfer error   */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_FOV0      0x00000200U    /*!< FIFO0 overrun error  */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_FOV1      0x00000400U    /*!< FIFO1 overrun error  */
Stm32f7xx_hal_can.h (drivers\stm32f7xx_hal_driver\inc):#define   HAL_CAN_ERROR_TXFAIL    0x00000800U    /*!< Transmit failure     */
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_CEC_BREERRORBITGEN(hcec->Init.BREErrorBitGen));
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_CEC_LBPEERRORBITGEN(hcec->Init.LBPEErrorBitGen));
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION(hcec->Init.BroadcastMsgNoErrorBitGen));
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  __HAL_CEC_CLEAR_FLAG(hcec,CEC_FLAG_TXEND|CEC_FLAG_TXBR|CEC_FLAG_RXBR|CEC_FLAG_RXEND|CEC_ISR_ALL_ERROR);
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;                                    
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
Stm32f7xx_hal_cec.c (drivers\stm32f7xx_hal_driver\src):    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR|HAL_CEC_ERROR_BRE|CEC_FLAG_LBPE|CEC_FLAG_SBPE|HAL_CEC_ERROR_RXACKE|HAL_CEC_ERROR_TXUDR|HAL_CEC_ERROR_TXERR|HAL_CEC_ERROR_TXACKE);
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              CEC_BRE_ERRORBIT_NO_GENERATION: no error-bit generation.
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              CEC_BRE_ERRORBIT_GENERATION:    error-bit generation if BRESTP is set. */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              CEC_LBPE_ERRORBIT_NO_GENERATION:  no error-bit generation. 
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              CEC_LBPE_ERRORBIT_GENERATION:     error-bit generation. */  
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              1) CEC_BROADCASTERROR_ERRORBIT_GENERATION.
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                                    and BREGEN=CEC_BRE_ERRORBIT_NO_GENERATION.
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                                    if LBPGEN=CEC_LBPE_ERRORBIT_NO_GENERATION.
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                              2) CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION.
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):  HAL_CEC_STATE_ERROR             = 0x60U     /*!< Error Value is allowed for gState only              */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_NONE    (uint32_t) 0x0000U     /*!< no error                      */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_RXOVR   CEC_ISR_RXOVR          /*!< CEC Rx-Overrun                */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_BRE     CEC_ISR_BRE            /*!< CEC Rx Bit Rising Error       */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_SBPE    CEC_ISR_SBPE           /*!< CEC Rx Short Bit period Error */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_LBPE    CEC_ISR_LBPE           /*!< CEC Rx Long Bit period Error  */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_RXACKE  CEC_ISR_RXACKE         /*!< CEC Rx Missing Acknowledge    */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_ARBLST  CEC_ISR_ARBLST         /*!< CEC Arbitration Lost          */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_TXUDR   CEC_ISR_TXUDR          /*!< CEC Tx-Buffer Underrun        */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_TXERR   CEC_ISR_TXERR          /*!< CEC Tx-Error                  */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CEC_ERROR_TXACKE  CEC_ISR_TXACKE         /*!< CEC Tx Missing Acknowledge    */
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_BRE_ERRORBIT_NO_GENERATION     ((uint32_t)0x00000000U)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_BRE_ERRORBIT_GENERATION        ((uint32_t)CEC_CFGR_BREGEN)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_LBPE_ERRORBIT_NO_GENERATION     ((uint32_t)0x00000000U)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_LBPE_ERRORBIT_GENERATION        ((uint32_t)CEC_CFGR_LBPEGEN)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_BROADCASTERROR_ERRORBIT_GENERATION     ((uint32_t)0x00000000U)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION  ((uint32_t)CEC_CFGR_BRDNOGEN)
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):/** @defgroup CEC_ALL_ERROR CEC all RX or TX errors flags 
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define CEC_ISR_ALL_ERROR              ((uint32_t)CEC_ISR_RXOVR|CEC_ISR_BRE|CEC_ISR_SBPE|CEC_ISR_LBPE|CEC_ISR_RXACKE|\
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define IS_CEC_BREERRORBITGEN(__ERRORBITGEN__) (((__ERRORBITGEN__) == CEC_BRE_ERRORBIT_NO_GENERATION) || \
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                                ((__ERRORBITGEN__) == CEC_BRE_ERRORBIT_GENERATION))
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define IS_CEC_LBPEERRORBITGEN(__ERRORBITGEN__) (((__ERRORBITGEN__) == CEC_LBPE_ERRORBIT_NO_GENERATION) || \
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                                 ((__ERRORBITGEN__) == CEC_LBPE_ERRORBIT_GENERATION))
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):#define IS_CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION(__ERRORBITGEN__) (((__ERRORBITGEN__) == CEC_BROADCASTERROR_ERRORBIT_GENERATION) || \
Stm32f7xx_hal_cec.h (drivers\stm32f7xx_hal_driver\inc):                                                                       ((__ERRORBITGEN__) == CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION))
Stm32f7xx_hal_crc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_crc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_crc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_crc.h (drivers\stm32f7xx_hal_driver\inc):  HAL_CRC_STATE_ERROR     = 0x04U   /*!< CRC error state                     */
Stm32f7xx_hal_crc_ex.c (drivers\stm32f7xx_hal_driver\src):   * definition. HAL_ERROR is reported if Pol degree is 
Stm32f7xx_hal_crc_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_crc_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_crc_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      hcryp->ErrorCode |= HAL_CRYP_WRITE_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      hcryp->ErrorCode |= HAL_CRYP_READ_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    if (hcryp->State == HAL_CRYP_STATE_ERROR)
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_cryp.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):  HAL_CRYP_STATE_ERROR             = 0x04U   /*!< CRYP error state                      */
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):  HAL_CRYP_STATE_ERROR             = 0x04,  /*!< CRYP error state                      */
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CRYP_ERROR_NONE      ((uint32_t)0x00000000)  /*!< No error        */
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CRYP_WRITE_ERROR     ((uint32_t)0x00000001)  /*!< Write error     */
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CRYP_READ_ERROR      ((uint32_t)0x00000002)  /*!< Read error      */
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CRYP_DMA_ERROR       ((uint32_t)0x00000004)  /*!< DMA error       */  
Stm32f7xx_hal_cryp.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_CRYP_BUSY_ERROR      ((uint32_t)0x00000008)  /*!< Busy flag error */  
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;   
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):          return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR; 
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):          return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR; 
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):          return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->ErrorCode |= HAL_CRYP_BUSY_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):  hcryp->State= HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):  hcryp->ErrorCode |= HAL_CRYP_DMA_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      hcryp->State = HAL_CRYP_STATE_ERROR; 
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR; 
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):  hcryp->State= HAL_CRYP_STATE_ERROR;
Stm32f7xx_hal_cryp_ex.c (drivers\stm32f7xx_hal_driver\src):  hcryp->ErrorCode |= HAL_CRYP_DMA_ERROR;  
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):    hdac->State = HAL_DAC_STATE_ERROR;      
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):    hdac->State = HAL_DAC_STATE_ERROR;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):    hdac->State = HAL_DAC_STATE_ERROR;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
Stm32f7xx_hal_dac.c (drivers\stm32f7xx_hal_driver\src):  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
Stm32f7xx_hal_dac.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DAC_STATE_ERROR             = 0x04U   /*!< DAC error state                      */
Stm32f7xx_hal_dac.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_DAC_ERROR_NONE              0x00U    /*!< No error                          */
Stm32f7xx_hal_dac.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_DAC_ERROR_DMAUNDERRUNCH1    0x01U    /*!< DAC channel1 DAM underrun error   */
Stm32f7xx_hal_dac.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_DAC_ERROR_DMAUNDERRUNCH2    0x02U    /*!< DAC channel2 DAM underrun error   */
Stm32f7xx_hal_dac.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_DAC_ERROR_DMA               0x04U    /*!< DMA error                         */
Stm32f7xx_hal_dac_ex.c (drivers\stm32f7xx_hal_driver\src):  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):    hdcmi->State = HAL_DCMI_STATE_ERROR;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):    hdcmi->State = HAL_DCMI_STATE_ERROR;
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
Stm32f7xx_hal_dcmi.c (drivers\stm32f7xx_hal_driver\src):    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DCMI_STATE_ERROR             = 0x04U,  /*!< DCMI error state                      */
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DCMI_ERROR_NONE      ((uint32_t)0x00000000U)    /*!< No error              */
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DCMI_ERROR_OVR       ((uint32_t)0x00000001U)    /*!< Overrun error         */
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DCMI_ERROR_SYNC      ((uint32_t)0x00000002U)    /*!< Synchronization error */
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DCMI_ERROR_TIMEOUT   ((uint32_t)0x00000020U)    /*!< Timeout error         */
Stm32f7xx_hal_dcmi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DCMI_ERROR_DMA       ((uint32_t)0x00000040U)    /*!< DMA error             */
Stm32f7xx_hal_def.h (drivers\stm32f7xx_hal_driver\inc):  HAL_ERROR    = 0x01U,
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):     (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
Stm32f7xx_hal_dfsdm.c (drivers\stm32f7xx_hal_driver\src):  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DFSDM_CHANNEL_STATE_ERROR = 0xFFU  /*!< DFSDM channel state error */
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DFSDM_FILTER_STATE_ERROR   = 0xFFU  /*!< DFSDM filter state error */
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):#define DFSDM_FILTER_ERROR_NONE             ((uint32_t)0x00000000U) /*!< No error */
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):#define DFSDM_FILTER_ERROR_REGULAR_OVERRUN  ((uint32_t)0x00000001U) /*!< Overrun occurs during regular conversion */
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):#define DFSDM_FILTER_ERROR_INJECTED_OVERRUN ((uint32_t)0x00000002U) /*!< Overrun occurs during injected conversion */
Stm32f7xx_hal_dfsdm.h (drivers\stm32f7xx_hal_driver\inc):#define DFSDM_FILTER_ERROR_DMA              ((uint32_t)0x00000003U) /*!< DMA error occurs */
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR; 
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    case  HAL_DMA_XFER_ERROR_CB_ID:
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    status =  HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    case  HAL_DMA_XFER_ERROR_CB_ID:
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_dma.c (drivers\stm32f7xx_hal_driver\src):        status = HAL_ERROR;
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DMA_XFER_ERROR_CB_ID         = 0x04U,    /*!< Error             */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_NONE            ((uint32_t)0x00000000U)    /*!< No error                               */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_TE              ((uint32_t)0x00000001U)    /*!< Transfer error                         */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_FE              ((uint32_t)0x00000002U)    /*!< FIFO error                             */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_DME             ((uint32_t)0x00000004U)    /*!< Direct Mode error                      */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_TIMEOUT         ((uint32_t)0x00000020U)    /*!< Timeout error                          */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_PARAM           ((uint32_t)0x00000040U)    /*!< Parameter error                        */
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_NO_XFER         ((uint32_t)0x00000080U)    /*!< Abort requested with no Xfer ongoing   */ 
Stm32f7xx_hal_dma.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA_ERROR_NOT_SUPPORTED   ((uint32_t)0x00000100U)    /*!< Not supported mode                     */     
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):            return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):        hdma2d->State = HAL_DMA2D_STATE_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):        hdma2d->State= HAL_DMA2D_STATE_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;      
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->State = HAL_DMA2D_STATE_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->State = HAL_DMA2D_STATE_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->State = HAL_DMA2D_STATE_ERROR;
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
Stm32f7xx_hal_dma2d.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;  
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DMA2D_STATE_ERROR             = 0x04U,    /*!< DMA2D state error                           */
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA2D_ERROR_NONE        ((uint32_t)0x00000000U)  /*!< No error             */
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA2D_ERROR_TE          ((uint32_t)0x00000001U)  /*!< Transfer error       */
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA2D_ERROR_CE          ((uint32_t)0x00000002U)  /*!< Configuration error  */
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA2D_ERROR_CAE         ((uint32_t)0x00000004U)  /*!< CLUT access error    */
Stm32f7xx_hal_dma2d.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DMA2D_ERROR_TIMEOUT     ((uint32_t)0x00000020U)  /*!< Timeout error        */
Stm32f7xx_hal_dma_ex.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
Stm32f7xx_hal_dma_ex.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_dma_ex.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
Stm32f7xx_hal_dma_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dma_ex.c (drivers\stm32f7xx_hal_driver\src):    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_ACK_MASK (DSI_ISR0_AE0 | DSI_ISR0_AE1 | DSI_ISR0_AE2 | DSI_ISR0_AE3 | \
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_PHY_MASK (DSI_ISR0_PE0 | DSI_ISR0_PE1 | DSI_ISR0_PE2 | DSI_ISR0_PE3 | DSI_ISR0_PE4)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_TX_MASK  DSI_ISR1_TOHSTX
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_RX_MASK  DSI_ISR1_TOLPRX
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_ECC_MASK (DSI_ISR1_ECCSE | DSI_ISR1_ECCME)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_CRC_MASK DSI_ISR1_CRCE
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_PSE_MASK DSI_ISR1_PSE
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_EOT_MASK DSI_ISR1_EOTPE
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_OVF_MASK DSI_ISR1_LPWRE
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):#define DSI_ERROR_GEN_MASK (DSI_ISR1_GCWRE | DSI_ISR1_GPWRE | DSI_ISR1_GPTXE | DSI_ISR1_GPRDE | DSI_ISR1_GPRXE)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_ACK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[0] |= DSI_ERROR_ACK_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_PHY ) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[0] |= DSI_ERROR_PHY_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_TX) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_TX_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_RX) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_RX_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_ECC) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_ECC_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_CRC) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_CRC_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_PSE) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_PSE_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_EOT) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_EOT_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_OVF) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_OVF_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):  if((ActiveErrors & HAL_DSI_ERROR_GEN) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    hdsi->Instance->IER[1] |= DSI_ERROR_GEN_MASK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus0 & DSI_ERROR_ACK_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus0 & DSI_ERROR_PHY_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_TX_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_RX_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_ECC_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_CRC_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_PSE_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_EOT_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_OVF_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if((ErrorStatus1 & DSI_ERROR_GEN_MASK) != RESET)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    if(hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
Stm32f7xx_hal_dsi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;    
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):  HAL_DSI_STATE_ERROR   = 0x02U,
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_NONE 0
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_ACK  ((uint32_t)0x00000001U) /*!< acknowledge errors          */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_PHY  ((uint32_t)0x00000002U) /*!< PHY related errors          */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_TX   ((uint32_t)0x00000004U) /*!< transmission error          */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_RX   ((uint32_t)0x00000008U) /*!< reception error             */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_ECC  ((uint32_t)0x00000010U) /*!< ECC errors                  */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_CRC  ((uint32_t)0x00000020U) /*!< CRC error                   */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_PSE  ((uint32_t)0x00000040U) /*!< Packet Size error           */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_EOT  ((uint32_t)0x00000080U) /*!< End Of Transmission error   */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_OVF  ((uint32_t)0x00000100U) /*!< FIFO overflow error         */
Stm32f7xx_hal_dsi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_DSI_ERROR_GEN  ((uint32_t)0x00000200U) /*!< Generic FIFO related errors */
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    /* Return HAL_ERROR */
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):        err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      /* Return HAL_ERROR */
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;   
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):        err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      /* Return HAL_ERROR */
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;   
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      err = ETH_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      /* Return HAL_ERROR */
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_ETH_FORWARD_ERROR_FRAMES(dmaconf->ForwardErrorFrames));
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
Stm32f7xx_hal_eth.c (drivers\stm32f7xx_hal_driver\src):    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define IS_ETH_DROP_TCPIP_CHECKSUM_FRAME(CMD) (((CMD) == ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE) || \
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):                                               ((CMD) == ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE))
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define IS_ETH_FORWARD_ERROR_FRAMES(CMD) (((CMD) == ETH_FORWARDERRORFRAMES_ENABLE) || \
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):                                          ((CMD) == ETH_FORWARDERRORFRAMES_DISABLE))
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):                                   ((FLAG) == ETH_DMA_FLAG_MMC) || ((FLAG) == ETH_DMA_FLAG_DATATRANSFERERROR) || \
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):                                   ((FLAG) == ETH_DMA_FLAG_READWRITEERROR) || ((FLAG) == ETH_DMA_FLAG_ACCESSERROR) || \
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define  ETH_ERROR              ((uint32_t)1U)
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):  HAL_ETH_STATE_ERROR             = 0x04U     /*!< Reception process is ongoing                       */
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE   ((uint32_t)0x00000000U)
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE  ((uint32_t)0x04000000U)
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_FORWARDERRORFRAMES_ENABLE       ((uint32_t)0x00000080U)
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_FORWARDERRORFRAMES_DISABLE      ((uint32_t)0x00000000U)
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_DMA_FLAG_DATATRANSFERERROR ((uint32_t)0x00800000U)  /*!< Error bits 0-Rx DMA, 1-Tx DMA */
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_DMA_FLAG_READWRITEERROR    ((uint32_t)0x01000000U)  /*!< Error bits 0-write transfer, 1-read transfer */
Stm32f7xx_hal_eth.h (drivers\stm32f7xx_hal_driver\inc):#define ETH_DMA_FLAG_ACCESSERROR       ((uint32_t)0x02000000U)  /*!< Error bits 0-data buffer, 1-desc. access */
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  *            @arg FLASH_ERROR_ERS: FLASH Erasing Sequence error flag 
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  *            @arg FLASH_ERROR_PGP: FLASH Programming Parallelism error flag  
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  *            @arg FLASH_ERROR_PGA: FLASH Programming Alignment error flag
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  *            @arg FLASH_ERROR_WRP: FLASH Write protected error flag
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  *            @arg FLASH_ERROR_OPERATION: FLASH operation Error flag 
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
Stm32f7xx_hal_flash.c (drivers\stm32f7xx_hal_driver\src):  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_NONE         ((uint32_t)0x00000000U)    /*!< No error                      */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_ERS          ((uint32_t)0x00000002U)    /*!< Programming Sequence error    */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_PGP          ((uint32_t)0x00000004U)    /*!< Programming Parallelism error */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_PGA          ((uint32_t)0x00000008U)    /*!< Programming Alignment error   */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_WRP          ((uint32_t)0x00000010U)    /*!< Write protection error        */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_OPERATION    ((uint32_t)0x00000020U)    /*!< Operation Error               */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_FLASH_ERROR_RD           ((uint32_t)0x00000040U)    /*!< Read Protection Error         */
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define FLASH_FLAG_ALL_ERRORS     (FLASH_FLAG_OPERR   | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
Stm32f7xx_hal_flash.h (drivers\stm32f7xx_hal_driver\inc):#define FLASH_FLAG_ALL_ERRORS     (FLASH_FLAG_OPERR   | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
Stm32f7xx_hal_flash_ex.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_flash_ex.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_gpio.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_hash.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_hash.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_hash.h (drivers\stm32f7xx_hal_driver\inc):  HAL_HASH_STATE_ERROR     = 0x04U   /*!< HASH error state                     */
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):  *            URB_ERROR/  
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):  *            URB_ERROR/  
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):        hhcd->hc[chnum].urb_state = URB_ERROR;
Stm32f7xx_hal_hcd.c (drivers\stm32f7xx_hal_driver\src):        hhcd->hc[chnum].urb_state = URB_ERROR;
Stm32f7xx_hal_hcd.h (drivers\stm32f7xx_hal_driver\inc):  HAL_HCD_STATE_ERROR    = 0x02U,
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):#define I2C_XFER_ERROR_IT       (0x00000011U)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  if((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  if((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):    if((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
Stm32f7xx_hal_i2c.c (drivers\stm32f7xx_hal_driver\src):  if((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):  HAL_I2C_STATE_ERROR             = 0xE0U    /*!< Error                                     */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_NONE      (0x00000000U)    /*!< No error              */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_BERR      (0x00000001U)    /*!< BERR error            */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_ARLO      (0x00000002U)    /*!< ARLO error            */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_AF        (0x00000004U)    /*!< ACKF error            */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_OVR       (0x00000008U)    /*!< OVR error             */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_DMA       (0x00000010U)    /*!< DMA transfer error    */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_TIMEOUT   (0x00000020U)    /*!< Timeout error         */
Stm32f7xx_hal_i2c.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2C_ERROR_SIZE      (0x00000040U)    /*!< Size Management error */
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        hi2s->ErrorCode |= HAL_I2S_ERROR_UDR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        hi2s->ErrorCode |= HAL_I2S_ERROR_OVR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):      hi2s->ErrorCode |= HAL_I2S_ERROR_OVR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):      hi2s->ErrorCode |= HAL_I2S_ERROR_UDR;
Stm32f7xx_hal_i2s.c (drivers\stm32f7xx_hal_driver\src):  hi2s->ErrorCode |= HAL_I2S_ERROR_DMA;
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):  HAL_I2S_STATE_ERROR      = 0x07U   /*!< I2S error state                                    */      
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_NONE      ((uint32_t)0x00000000U)  /*!< No error           */
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_TIMEOUT   ((uint32_t)0x00000001U)  /*!< Timeout error      */
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_OVR       ((uint32_t)0x00000002U)  /*!< OVR error          */
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_UDR       ((uint32_t)0x00000004U)  /*!< UDR error          */
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_DMA       ((uint32_t)0x00000008U)  /*!< DMA transfer error */
Stm32f7xx_hal_i2s.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_I2S_ERROR_UNKNOW    ((uint32_t)0x00000010U)  /*!< Unknow Error error */
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  if (IRDA_SetConfig(hirda) == HAL_ERROR)
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):    if(hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) ||
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):      ret = HAL_ERROR;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode |= HAL_IRDA_ERROR_DMA;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.c (drivers\stm32f7xx_hal_driver\src):  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):  HAL_IRDA_STATE_ERROR             = 0xE0U     /*!< Error 
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_NONE      ((uint32_t)0x00000000U)    /*!< No error            */
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_PE        ((uint32_t)0x00000001U)    /*!< Parity error        */
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_NE        ((uint32_t)0x00000002U)    /*!< Noise error         */
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_FE        ((uint32_t)0x00000004U)    /*!< frame error         */
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_ORE       ((uint32_t)0x00000008U)    /*!< Overrun error       */
Stm32f7xx_hal_irda.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_IRDA_ERROR_DMA       ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
Stm32f7xx_hal_iwdg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):        return  HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):            hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;          
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;  
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;      
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR; /* Huffman Table overflow error*/
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR; /* Huffman Table overflow error*/
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;  
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
Stm32f7xx_hal_jpeg.c (drivers\stm32f7xx_hal_driver\src):    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA; 
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):  HAL_JPEG_STATE_ERROR              = 0x06U   /*!< JPEG error state                      */
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_JPEG_ERROR_NONE        ((uint32_t)0x00000000U)    /*!< No error             */
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_JPEG_ERROR_HUFF_TABLE  ((uint32_t)0x00000001U)    /*!< HUffman Table programming error */
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_JPEG_ERROR_QUANT_TABLE ((uint32_t)0x00000002U)    /*!< Quantization Table programming error */
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_JPEG_ERROR_DMA         ((uint32_t)0x00000004U)    /*!< DMA transfer error   */
Stm32f7xx_hal_jpeg.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_JPEG_ERROR_TIMEOUT     ((uint32_t)0x00000008U)    /*!< Timeout error        */
Stm32f7xx_hal_lptim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_lptim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_lptim.h (drivers\stm32f7xx_hal_driver\inc):  HAL_LPTIM_STATE_ERROR            = 0x04U     /*!< Internal Process is ongoing                */                                                                             
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):      hltdc->State = HAL_LTDC_STATE_ERROR;
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
Stm32f7xx_hal_ltdc.c (drivers\stm32f7xx_hal_driver\src):      hltdc->State = HAL_LTDC_STATE_ERROR;
Stm32f7xx_hal_ltdc.h (drivers\stm32f7xx_hal_driver\inc):  HAL_LTDC_STATE_ERROR             = 0x04U     /*!< LTDC state error                     */
Stm32f7xx_hal_ltdc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_LTDC_ERROR_NONE      ((uint32_t)0x00000000U)    /*!< LTDC No error             */
Stm32f7xx_hal_ltdc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_LTDC_ERROR_TE        ((uint32_t)0x00000001U)    /*!< LTDC Transfer error       */
Stm32f7xx_hal_ltdc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_LTDC_ERROR_FU        ((uint32_t)0x00000002U)    /*!< LTDC FIFO Underrun        */
Stm32f7xx_hal_ltdc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_LTDC_ERROR_TIMEOUT   ((uint32_t)0x00000020U)    /*!< LTDC Timeout error        */
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):#define	MDIOS_ALL_ERRORS_FLAG           ((uint32_t)(MDIOS_SR_PERF | MDIOS_SR_SERF | MDIOS_SR_TERF))
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):  __HAL_MDIOS_ENABLE_IT(hmdios, (MDIOS_IT_WRITE | MDIOS_IT_READ | MDIOS_IT_ERROR));
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
Stm32f7xx_hal_mdios.c (drivers\stm32f7xx_hal_driver\src):      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  HAL_MDIOS_STATE_ERROR             = 0x04U     /*!< Reception process is ongoing                       */
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define MDIOS_IT_ERROR                   MDIOS_CR_EIE
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define	MDIOS_TURNAROUND_ERROR_FLAG       MDIOS_SR_TERF
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define	MDIOS_START_ERROR_FLAG            MDIOS_SR_SERF
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define	MDIOS_PREAMBLE_ERROR_FLAG         MDIOS_SR_PERF
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_IT_ERROR: Error interrupt 
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_IT_ERROR: Error interrupt 
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_TURNARROUND_ERROR_FLAG: Register write interrupt
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_START_ERROR_FLAG: Register read interrupt
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_PREAMBLE_ERROR_FLAG: Error interrupt 
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define __HAL_MDIOS_GET_ERROR_FLAG(__HANDLE__, __FLAG__)       ((__HANDLE__)->Instance->SR &  (__FLAG__))
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_TURNARROUND_ERROR_FLAG: Register write interrupt
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_START_ERROR_FLAG: Register read interrupt
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_PREAMBLE_ERROR_FLAG: Error interrupt 
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):#define __HAL_MDIOS_CLEAR_ERROR_FLAG(__HANDLE__, __FLAG__)       ((__HANDLE__)->Instance->CLRFR) |= (__FLAG__)
Stm32f7xx_hal_mdios.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg MDIOS_IT_ERROR: Error interrupt 
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_BUSY;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;      
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_BUSY;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL; 
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT; 
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN; 
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN; 
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):        hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if((hmmc->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hmmc->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      hmmc->ErrorCode |= HAL_MMC_ERROR_DMA;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  return HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_MMC_ERROR_NONE)
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  return HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_MMC_ERROR_PARAM;
Stm32f7xx_hal_mmc.c (drivers\stm32f7xx_hal_driver\src):  return HAL_MMC_ERROR_NONE;
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):  HAL_MMC_STATE_ERROR                  = ((uint32_t)0x0000000FU)   /*!< MMC is in error state                */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):  HAL_MMC_CARD_ERROR                  = ((uint32_t)0x000000FFU)   /*!< Card response Error                     */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_NONE                     SDMMC_ERROR_NONE                    /*!< No error                                                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CMD_CRC_FAIL             SDMMC_ERROR_CMD_CRC_FAIL            /*!< Command response received (but CRC check failed)              */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_DATA_CRC_FAIL            SDMMC_ERROR_DATA_CRC_FAIL           /*!< Data block sent/received (CRC check failed)                   */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CMD_RSP_TIMEOUT          SDMMC_ERROR_CMD_RSP_TIMEOUT         /*!< Command response timeout                                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_DATA_TIMEOUT             SDMMC_ERROR_DATA_TIMEOUT            /*!< Data timeout                                                  */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_TX_UNDERRUN              SDMMC_ERROR_TX_UNDERRUN             /*!< Transmit FIFO underrun                                        */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_RX_OVERRUN               SDMMC_ERROR_RX_OVERRUN              /*!< Receive FIFO overrun                                          */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_ADDR_MISALIGNED          SDMMC_ERROR_ADDR_MISALIGNED         /*!< Misaligned address                                            */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_BLOCK_LEN_ERR            SDMMC_ERROR_BLOCK_LEN_ERR           /*!< Transferred block length is not allowed for the card or the 
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_ERASE_SEQ_ERR            SDMMC_ERROR_ERASE_SEQ_ERR           /*!< An error in the sequence of erase command occurs              */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_BAD_ERASE_PARAM          SDMMC_ERROR_BAD_ERASE_PARAM         /*!< An invalid selection for erase groups                         */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_WRITE_PROT_VIOLATION     SDMMC_ERROR_WRITE_PROT_VIOLATION    /*!< Attempt to program a write protect block                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_LOCK_UNLOCK_FAILED       SDMMC_ERROR_LOCK_UNLOCK_FAILED      /*!< Sequence or password error has been detected in unlock 
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_COM_CRC_FAILED           SDMMC_ERROR_COM_CRC_FAILED          /*!< CRC check of the previous command failed                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_ILLEGAL_CMD              SDMMC_ERROR_ILLEGAL_CMD             /*!< Command is not legal for the card state                       */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CARD_ECC_FAILED          SDMMC_ERROR_CARD_ECC_FAILED         /*!< Card internal ECC was applied but failed to correct the data  */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CC_ERR                   SDMMC_ERROR_CC_ERR                  /*!< Internal card controller error                                */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_GENERAL_UNKNOWN_ERR      SDMMC_ERROR_GENERAL_UNKNOWN_ERR     /*!< General or unknown error                                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_STREAM_READ_UNDERRUN     SDMMC_ERROR_STREAM_READ_UNDERRUN    /*!< The card could not sustain data reading in stream rmode       */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_STREAM_WRITE_OVERRUN     SDMMC_ERROR_STREAM_WRITE_OVERRUN    /*!< The card could not sustain data programming in stream mode    */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CID_CSD_OVERWRITE        SDMMC_ERROR_CID_CSD_OVERWRITE       /*!< CID/CSD overwrite error                                       */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_WP_ERASE_SKIP            SDMMC_ERROR_WP_ERASE_SKIP           /*!< Only partial address space was erased                         */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_CARD_ECC_DISABLED        SDMMC_ERROR_CARD_ECC_DISABLED       /*!< Command has been executed without using internal ECC          */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_ERASE_RESET              SDMMC_ERROR_ERASE_RESET             /*!< Erase sequence was cleared before executing because an out 
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_AKE_SEQ_ERR              SDMMC_ERROR_AKE_SEQ_ERR             /*!< Error in sequence of authentication                           */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_INVALID_VOLTRANGE        SDMMC_ERROR_INVALID_VOLTRANGE       /*!< Error in case of invalid voltage range                        */        
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_ADDR_OUT_OF_RANGE        SDMMC_ERROR_ADDR_OUT_OF_RANGE       /*!< Error when addressed block is out of range                    */        
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE   SDMMC_ERROR_REQUEST_NOT_APPLICABLE  /*!< Error when command request is not applicable                  */  
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_PARAM                    SDMMC_ERROR_INVALID_PARAMETER       /*!< the used parameter is not valid                               */  
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_UNSUPPORTED_FEATURE      SDMMC_ERROR_UNSUPPORTED_FEATURE     /*!< Error when feature is not insupported                         */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_BUSY                     SDMMC_ERROR_BUSY                    /*!< Error when transfer process is busy                           */ 
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_DMA                      SDMMC_ERROR_DMA                     /*!< Error while DMA transfer                                      */
Stm32f7xx_hal_mmc.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_MMC_ERROR_TIMEOUT                  SDMMC_ERROR_TIMEOUT                 /*!< Timeout error                                                 */
Stm32f7xx_hal_nand.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_nand.c (drivers\stm32f7xx_hal_driver\src):  if((data & NAND_ERROR) == NAND_ERROR)
Stm32f7xx_hal_nand.c (drivers\stm32f7xx_hal_driver\src):    return NAND_ERROR;
Stm32f7xx_hal_nand.h (drivers\stm32f7xx_hal_driver\inc):  HAL_NAND_STATE_ERROR     = 0x03U   /*!< NAND error state                     */
Stm32f7xx_hal_nand.h (drivers\stm32f7xx_hal_driver\inc):#define NAND_TIMEOUT_ERROR         ((uint32_t)0x00000400U)
Stm32f7xx_hal_nand.h (drivers\stm32f7xx_hal_driver\inc):#define NAND_ERROR                 ((uint32_t)0x00000001U)
Stm32f7xx_hal_nor.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_nor.c (drivers\stm32f7xx_hal_driver\src):  * @retval NOR_Status: The returned value can be: HAL_NOR_STATUS_SUCCESS, HAL_NOR_STATUS_ERROR
Stm32f7xx_hal_nor.c (drivers\stm32f7xx_hal_driver\src):      return HAL_NOR_STATUS_ERROR;
Stm32f7xx_hal_nor.h (drivers\stm32f7xx_hal_driver\inc):  HAL_NOR_STATE_ERROR             = 0x03U,  /*!< NOR error state                      */
Stm32f7xx_hal_nor.h (drivers\stm32f7xx_hal_driver\inc):  HAL_NOR_STATUS_ERROR,
Stm32f7xx_hal_pcd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_pcd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_pcd.h (drivers\stm32f7xx_hal_driver\inc):  HAL_PCD_STATE_ERROR   = 0x02U,
Stm32f7xx_hal_pcd_ex.c (drivers\stm32f7xx_hal_driver\src):        HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
Stm32f7xx_hal_pcd_ex.h (drivers\stm32f7xx_hal_driver\inc):  PCD_BCD_ERROR                     = 0xFF, 
Stm32f7xx_hal_pwr_ex.c (drivers\stm32f7xx_hal_driver\src):  *        as system clock source, otherwise the API returns HAL_ERROR.  
Stm32f7xx_hal_pwr_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):          status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):      status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  HAL_StatusTypeDef status = HAL_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):    hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):        hqspi->State     = HAL_QSPI_STATE_ERROR;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
Stm32f7xx_hal_qspi.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):  HAL_QSPI_STATE_ERROR             = 0x04U     /*!< Peripheral in error                                   */
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_QSPI_ERROR_NONE            ((uint32_t)0x00000000U) /*!< No error           */
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_QSPI_ERROR_TIMEOUT         ((uint32_t)0x00000001U) /*!< Timeout error      */
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_QSPI_ERROR_TRANSFER        ((uint32_t)0x00000002U) /*!< Transfer error     */
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_QSPI_ERROR_DMA             ((uint32_t)0x00000004U) /*!< DMA transfer error */
Stm32f7xx_hal_qspi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_QSPI_ERROR_INVALID_PARAM   ((uint32_t)0x00000008U) /*!< Invalid parameters error */
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rcc.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):        hrng->State = HAL_RNG_STATE_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    hrng->State = HAL_RNG_STATE_ERROR;
Stm32f7xx_hal_rng.c (drivers\stm32f7xx_hal_driver\src):    if(hrng->State != HAL_RNG_STATE_ERROR)
Stm32f7xx_hal_rng.h (drivers\stm32f7xx_hal_driver\inc):  HAL_RNG_STATE_ERROR     = 0x04U   /*!< RNG error state                     */
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_rtc.h (drivers\stm32f7xx_hal_driver\inc):  HAL_RTC_STATE_ERROR             = 0x04U   /*!< RTC error state                     */      
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR; 
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR; 
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):          hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):      hrtc->State = HAL_RTC_STATE_ERROR; 
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    hrtc->State = HAL_RTC_STATE_ERROR;
Stm32f7xx_hal_rtc_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    status = HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);      
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
Stm32f7xx_hal_sai.c (drivers\stm32f7xx_hal_driver\src):  if(hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_NONE    ((uint32_t)0x00000000U)  /*!< No error                                    */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_OVR     ((uint32_t)0x00000001U)  /*!< Overrun Error                               */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_UDR     ((uint32_t)0x00000002U)  /*!< Underrun error                              */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_AFSDET  ((uint32_t)0x00000004U)  /*!< Anticipated Frame synchronisation detection */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_LFSDET  ((uint32_t)0x00000008U)  /*!< Late Frame synchronisation detection        */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_CNREADY ((uint32_t)0x00000010U)  /*!< codec not ready                             */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_WCKCFG  ((uint32_t)0x00000020U)  /*!< Wrong clock configuration                   */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_TIMEOUT ((uint32_t)0x00000040U)  /*!< Timeout error                               */
Stm32f7xx_hal_sai.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SAI_ERROR_DMA     ((uint32_t)0x00000080U)  /*!< DMA error                                   */
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  hsd->ErrorCode = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        hsd->ErrorCode = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_SD_ERROR_INVALID_VOLTRANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):        return HAL_SD_ERROR_INVALID_VOLTRANGE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  if(errorstate != HAL_SD_ERROR_NONE)
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_SD_ERROR_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_DATA_CRC_FAIL;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_RX_OVERRUN;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_SD_ERROR_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_PARAM;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):      return HAL_SD_ERROR_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_DATA_TIMEOUT;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_DATA_CRC_FAIL;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):    return HAL_SD_ERROR_RX_OVERRUN;
Stm32f7xx_hal_sd.c (drivers\stm32f7xx_hal_driver\src):  return HAL_SD_ERROR_NONE;
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SD_STATE_ERROR                  = ((uint32_t)0x0000000FU)   /*!< SD is in error state                */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SD_CARD_ERROR                  = ((uint32_t)0x000000FFU)   /*!< Card response Error                     */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_NONE                     SDMMC_ERROR_NONE                    /*!< No error                                                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CMD_CRC_FAIL             SDMMC_ERROR_CMD_CRC_FAIL            /*!< Command response received (but CRC check failed)              */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_DATA_CRC_FAIL            SDMMC_ERROR_DATA_CRC_FAIL           /*!< Data block sent/received (CRC check failed)                   */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CMD_RSP_TIMEOUT          SDMMC_ERROR_CMD_RSP_TIMEOUT         /*!< Command response timeout                                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_DATA_TIMEOUT             SDMMC_ERROR_DATA_TIMEOUT            /*!< Data timeout                                                  */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_TX_UNDERRUN              SDMMC_ERROR_TX_UNDERRUN             /*!< Transmit FIFO underrun                                        */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_RX_OVERRUN               SDMMC_ERROR_RX_OVERRUN              /*!< Receive FIFO overrun                                          */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_ADDR_MISALIGNED          SDMMC_ERROR_ADDR_MISALIGNED         /*!< Misaligned address                                            */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_BLOCK_LEN_ERR            SDMMC_ERROR_BLOCK_LEN_ERR           /*!< Transferred block length is not allowed for the card or the 
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_ERASE_SEQ_ERR            SDMMC_ERROR_ERASE_SEQ_ERR           /*!< An error in the sequence of erase command occurs              */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_BAD_ERASE_PARAM          SDMMC_ERROR_BAD_ERASE_PARAM         /*!< An invalid selection for erase groups                         */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_WRITE_PROT_VIOLATION     SDMMC_ERROR_WRITE_PROT_VIOLATION    /*!< Attempt to program a write protect block                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_LOCK_UNLOCK_FAILED       SDMMC_ERROR_LOCK_UNLOCK_FAILED      /*!< Sequence or password error has been detected in unlock 
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_COM_CRC_FAILED           SDMMC_ERROR_COM_CRC_FAILED          /*!< CRC check of the previous command failed                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_ILLEGAL_CMD              SDMMC_ERROR_ILLEGAL_CMD             /*!< Command is not legal for the card state                       */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CARD_ECC_FAILED          SDMMC_ERROR_CARD_ECC_FAILED         /*!< Card internal ECC was applied but failed to correct the data  */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CC_ERR                   SDMMC_ERROR_CC_ERR                  /*!< Internal card controller error                                */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_GENERAL_UNKNOWN_ERR      SDMMC_ERROR_GENERAL_UNKNOWN_ERR     /*!< General or unknown error                                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_STREAM_READ_UNDERRUN     SDMMC_ERROR_STREAM_READ_UNDERRUN    /*!< The card could not sustain data reading in stream rmode       */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_STREAM_WRITE_OVERRUN     SDMMC_ERROR_STREAM_WRITE_OVERRUN    /*!< The card could not sustain data programming in stream mode    */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CID_CSD_OVERWRITE        SDMMC_ERROR_CID_CSD_OVERWRITE       /*!< CID/CSD overwrite error                                       */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_WP_ERASE_SKIP            SDMMC_ERROR_WP_ERASE_SKIP           /*!< Only partial address space was erased                         */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_CARD_ECC_DISABLED        SDMMC_ERROR_CARD_ECC_DISABLED       /*!< Command has been executed without using internal ECC          */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_ERASE_RESET              SDMMC_ERROR_ERASE_RESET             /*!< Erase sequence was cleared before executing because an out 
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_AKE_SEQ_ERR              SDMMC_ERROR_AKE_SEQ_ERR             /*!< Error in sequence of authentication                           */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_INVALID_VOLTRANGE        SDMMC_ERROR_INVALID_VOLTRANGE       /*!< Error in case of invalid voltage range                        */        
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_ADDR_OUT_OF_RANGE        SDMMC_ERROR_ADDR_OUT_OF_RANGE       /*!< Error when addressed block is out of range                    */        
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_REQUEST_NOT_APPLICABLE   SDMMC_ERROR_REQUEST_NOT_APPLICABLE  /*!< Error when command request is not applicable                  */  
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_PARAM                    SDMMC_ERROR_INVALID_PARAMETER       /*!< the used parameter is not valid                               */  
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_UNSUPPORTED_FEATURE      SDMMC_ERROR_UNSUPPORTED_FEATURE     /*!< Error when feature is not insupported                         */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_BUSY                     SDMMC_ERROR_BUSY                    /*!< Error when transfer process is busy                           */ 
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_DMA                      SDMMC_ERROR_DMA                     /*!< Error while DMA transfer                                      */
Stm32f7xx_hal_sd.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SD_ERROR_TIMEOUT                  SDMMC_ERROR_TIMEOUT                 /*!< Timeout error                                                 */
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sdram.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SDRAM_STATE_ERROR             = 0x03U,  /*!< SDRAM error state                     */
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  if (SMARTCARD_SetConfig(hsmartcard) == HAL_ERROR)
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_PE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_FE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_NE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_ORE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_RTO;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    if(hsmartcard->ErrorCode != HAL_SMARTCARD_ERROR_NONE)
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      if (   ((hsmartcard->ErrorCode & (HAL_SMARTCARD_ERROR_RTO | HAL_SMARTCARD_ERROR_ORE)) != RESET)
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      else if ((hsmartcard->gState == HAL_SMARTCARD_STATE_BUSY_TX) && ((hsmartcard->ErrorCode & HAL_SMARTCARD_ERROR_FE) != RESET))
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):        hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):      ret = HAL_ERROR;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT))
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):    assert_param(IS_SMARTCARD_ADVFEATURE_DMAONRXERROR(hsmartcard->AdvancedInit.DMADisableonRxError));
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode |= HAL_SMARTCARD_ERROR_DMA;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.c (drivers\stm32f7xx_hal_driver\src):  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SMARTCARD_STATE_ERROR             = 0xE0U    /*!< Error
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_NONE      ((uint32_t)0x00U)    /*!< No error                */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_PE        ((uint32_t)0x01U)    /*!< Parity error            */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_NE        ((uint32_t)0x02U)    /*!< Noise error             */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_FE        ((uint32_t)0x04U)    /*!< frame error             */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_ORE       ((uint32_t)0x08U)    /*!< Overrun error           */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_DMA       ((uint32_t)0x10U)    /*!< DMA transfer error      */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMARTCARD_ERROR_RTO       ((uint32_t)0x20U)    /*!< Receiver TimeOut error  */
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT  ((uint32_t)0x00000020U)
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define SMARTCARD_ADVFEATURE_DMA_ENABLEONRXERROR       ((uint32_t)0x00000000U)
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define SMARTCARD_ADVFEATURE_DMA_DISABLEONRXERROR      ((uint32_t)USART_CR3_DDRE)
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):                                                            SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT   | \
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):#define IS_SMARTCARD_ADVFEATURE_DMAONRXERROR(DMA)      (((DMA) == SMARTCARD_ADVFEATURE_DMA_ENABLEONRXERROR) || \
Stm32f7xx_hal_smartcard.h (drivers\stm32f7xx_hal_driver\inc):                                                   ((DMA) == SMARTCARD_ADVFEATURE_DMA_DISABLEONRXERROR))
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):  if((hsmbus->ErrorCode != HAL_SMBUS_ERROR_NONE)&&(hsmbus->ErrorCode != HAL_SMBUS_ERROR_ACKF))
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    if((hsmbus->ErrorCode & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
Stm32f7xx_hal_smbus.c (drivers\stm32f7xx_hal_driver\src):      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_STATE_ERROR           (0x00000004U)  /*!< Reception process is ongoing                  */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_NONE            (0x00000000U)    /*!< No error             */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_BERR            (0x00000001U)    /*!< BERR error           */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_ARLO            (0x00000002U)    /*!< ARLO error           */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_ACKF            (0x00000004U)    /*!< ACKF error           */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_OVR             (0x00000008U)    /*!< OVR error            */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_HALTIMEOUT      (0x00000010U)    /*!< Timeout error        */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_BUSTIMEOUT      (0x00000020U)    /*!< Bus Timeout error    */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_ALERT           (0x00000040U)    /*!< Alert error          */
Stm32f7xx_hal_smbus.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SMBUS_ERROR_PECERR          (0x00000080U)    /*!< PEC error            */
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):  assert_param(IS_PARITY_ERROR_MASK(sDataFormat.ParityErrorMask));
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;    
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR;                                    
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
Stm32f7xx_hal_spdifrx.c (drivers\stm32f7xx_hal_driver\src):  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SPDIFRX_STATE_ERROR      = 0x07U   /*!< SPDIFRX error state                                    */      
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_NONE      ((uint32_t)0x00000000U)  /*!< No error           */
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_TIMEOUT   ((uint32_t)0x00000001U)  /*!< Timeout error      */  
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_OVR       ((uint32_t)0x00000002U)  /*!< OVR error          */
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_PE        ((uint32_t)0x00000004U)  /*!< Parity error       */
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_DMA       ((uint32_t)0x00000008U)  /*!< DMA transfer error */
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPDIFRX_ERROR_UNKNOWN   ((uint32_t)0x00000010U)  /*!< Unknown Error error */  
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define SPDIFRX_PARITYERRORMASK_OFF                   ((uint32_t)0x00000000U)
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define SPDIFRX_PARITYERRORMASK_ON                    ((uint32_t)SPDIFRX_CR_PMSK)
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):#define IS_PARITY_ERROR_MASK(VAL)            (((VAL) == SPDIFRX_PARITYERRORMASK_OFF) || \
Stm32f7xx_hal_spdifrx.h (drivers\stm32f7xx_hal_driver\inc):                                             ((VAL) == SPDIFRX_PARITYERRORMASK_ON))
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      errorcode = HAL_ERROR;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.c (drivers\stm32f7xx_hal_driver\src):    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):    HAL_SPI_STATE_ERROR      = 0x06U,    /*!< SPI error state                                    */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_NONE              ((uint32_t)0x00000000U)   /*!< No error                               */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_MODF              ((uint32_t)0x00000001U)   /*!< MODF error                             */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_CRC               ((uint32_t)0x00000002U)   /*!< CRC error                              */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_OVR               ((uint32_t)0x00000004U)   /*!< OVR error                              */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_FRE               ((uint32_t)0x00000008U)   /*!< FRE error                              */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_DMA               ((uint32_t)0x00000010U)   /*!< DMA transfer error                     */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_FLAG              ((uint32_t)0x00000020U)   /*!< Error on RXNE/TXE/BSY/FTLVL/FRLVL Flag */
Stm32f7xx_hal_spi.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_SPI_ERROR_ABORT             ((uint32_t)0x00000040U)   /*!< Error during SPI Abort procedure       */
Stm32f7xx_hal_sram.c (drivers\stm32f7xx_hal_driver\src):     return HAL_ERROR;
Stm32f7xx_hal_sram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sram.c (drivers\stm32f7xx_hal_driver\src):    return  HAL_ERROR; 
Stm32f7xx_hal_sram.h (drivers\stm32f7xx_hal_driver\inc):  HAL_SRAM_STATE_ERROR     = 0x03U,  /*!< SRAM error state                               */
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim.h (drivers\stm32f7xx_hal_driver\inc):  HAL_TIM_STATE_ERROR             = 0x04U     /*!< Reception process is ongoing                */
Stm32f7xx_hal_timebase_rtc_alarm_template.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_timebase_rtc_alarm_template.c (drivers\stm32f7xx_hal_driver\src):            return HAL_ERROR;
Stm32f7xx_hal_timebase_rtc_alarm_template.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_timebase_rtc_wakeup_template.c (drivers\stm32f7xx_hal_driver\src):          return HAL_ERROR;
Stm32f7xx_hal_timebase_rtc_wakeup_template.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_timebase_tim_template.c (drivers\stm32f7xx_hal_driver\src):  return HAL_ERROR;
Stm32f7xx_hal_tim_ex.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_tim_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_tim_ex.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;                                    
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if (UART_SetConfig(huart) == HAL_ERROR)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if (UART_SetConfig(huart) == HAL_ERROR)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if (UART_SetConfig(huart) == HAL_ERROR)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if (UART_SetConfig(huart) == HAL_ERROR)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if (UART_SetConfig(huart) == HAL_ERROR)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      huart->ErrorCode |= HAL_UART_ERROR_PE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      huart->ErrorCode |= HAL_UART_ERROR_FE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      huart->ErrorCode |= HAL_UART_ERROR_NE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      huart->ErrorCode |= HAL_UART_ERROR_ORE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):        huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):        ret = HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):        ret = HAL_ERROR;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):  huart->ErrorCode = HAL_UART_ERROR_NONE;
Stm32f7xx_hal_uart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):  HAL_UART_STATE_ERROR             = 0xE0U    /*!< Error
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_NONE       ((uint32_t)0x00000000U)    /*!< No error            */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_PE         ((uint32_t)0x00000001U)    /*!< Parity error        */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define UART_ADVFEATURE_DMADISABLEONERROR_INIT  ((uint32_t)0x00000020U)
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define UART_ADVFEATURE_DMA_ENABLEONRXERROR    ((uint32_t)0x00000000U)
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define UART_ADVFEATURE_DMA_DISABLEONRXERROR   ((uint32_t)USART_CR3_DDRE)
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):                                                            UART_ADVFEATURE_DMADISABLEONERROR_INIT   | \
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):#define IS_UART_ADVFEATURE_DMAONRXERROR(DMA)      (((DMA) == UART_ADVFEATURE_DMA_ENABLEONRXERROR) || \
Stm32f7xx_hal_uart.h (drivers\stm32f7xx_hal_driver\inc):                                                   ((DMA) == UART_ADVFEATURE_DMA_DISABLEONRXERROR))
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):  if (USART_SetConfig(husart) == HAL_ERROR)
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):  husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return  HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      return HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      husart->ErrorCode |= HAL_USART_ERROR_PE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      husart->ErrorCode |= HAL_USART_ERROR_FE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      husart->ErrorCode |= HAL_USART_ERROR_NE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      husart->ErrorCode |= HAL_USART_ERROR_ORE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) ||
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):        husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):  husart->ErrorCode |= HAL_USART_ERROR_DMA;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):      ret = HAL_ERROR;
Stm32f7xx_hal_usart.c (drivers\stm32f7xx_hal_driver\src):  husart->ErrorCode = HAL_USART_ERROR_NONE;
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):  HAL_USART_STATE_ERROR             = 0x04U     /*!< Error */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_NONE         ((uint32_t)0x00000000U)   /*!< No error            */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_PE           ((uint32_t)0x00000001U)   /*!< Parity error        */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_NE           ((uint32_t)0x00000002U)   /*!< Noise error         */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_FE           ((uint32_t)0x00000004U)   /*!< Frame error         */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_ORE          ((uint32_t)0x00000008U)   /*!< Overrun error       */
Stm32f7xx_hal_usart.h (drivers\stm32f7xx_hal_driver\inc):#define HAL_USART_ERROR_DMA          ((uint32_t)0x00000010U)   /*!< DMA transfer error  */
Stm32f7xx_hal_wwdg.c (drivers\stm32f7xx_hal_driver\src):    return HAL_ERROR;
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ADC common registers are not initialized
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ADC registers are not de-initialized
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ADC registers are not initialized
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ADC registers are not initialized
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ADC registers are not initialized
Stm32f7xx_ll_adc.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_crc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: CRC registers are not de-initialized
Stm32f7xx_ll_crc.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_dac.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_dac.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: DAC registers are not initialized
Stm32f7xx_ll_dac.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_dma.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: DMA registers are not de-initialized
Stm32f7xx_ll_dma.c (drivers\stm32f7xx_hal_driver\src):      status = ERROR;
Stm32f7xx_ll_dma.c (drivers\stm32f7xx_hal_driver\src):      status = ERROR;
Stm32f7xx_ll_dma.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Not applicable
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: DMA2D registers are not de-initialized
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):  *         otherwise ERROR result is returned.
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Issue occurred during DMA2D registers initialization
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_dma2d.c (drivers\stm32f7xx_hal_driver\src):  /* If DMA2D transfers are not disabled, return ERROR */
Stm32f7xx_ll_exti.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_exti.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_exti.c (drivers\stm32f7xx_hal_driver\src):          status = ERROR;
Stm32f7xx_ll_exti.c (drivers\stm32f7xx_hal_driver\src):            status = ERROR;
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):#define FMC_IT_REFRESH_ERROR              ((uint32_t)0x00004000U)
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):#define FMC_SDRAM_FLAG_REFRESH_ERROR            FMC_SDRTR_CRE
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg FMC_IT_REFRESH_ERROR: Interrupt refresh error      
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg FMC_IT_REFRESH_ERROR: Interrupt refresh error      
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):  *            @arg FMC_SDRAM_FLAG_REFRESH_ERROR: Refresh error flag.
Stm32f7xx_ll_fmc.h (drivers\stm32f7xx_hal_driver\inc):  *           @arg FMC_SDRAM_FLAG_REFRESH_ERROR
Stm32f7xx_ll_gpio.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR:   Wrong GPIO Port
Stm32f7xx_ll_gpio.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_gpio.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR:   Not applicable
Stm32f7xx_ll_i2c.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: I2C registers are not de-initialized
Stm32f7xx_ll_i2c.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_i2c.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Not applicable
Stm32f7xx_ll_lptim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: invalid LPTIMx instance
Stm32f7xx_ll_lptim.c (drivers\stm32f7xx_hal_driver\src):    result = ERROR;
Stm32f7xx_ll_lptim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: LPTIMx instance hasn't been initialized
Stm32f7xx_ll_lptim.c (drivers\stm32f7xx_hal_driver\src):    result = ERROR;
Stm32f7xx_ll_pwr.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_rcc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_rng.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC registers are not de-initialized
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC registers are not initialized
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC Time register is not configured
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC Day register is not configured
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ALARMA registers are not configured
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: ALARMB registers are not configured
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC is not in Init mode
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):        status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Not applicable
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: RTC registers are not synchronised
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):      status = ERROR;
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):  if (status != ERROR)
Stm32f7xx_ll_rtc.c (drivers\stm32f7xx_hal_driver\src):        status = ERROR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  /* If there is a HAL_ERROR, it is a MMC card, else
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  uint32_t errorstate = SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_CRC_FAIL;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_CRC_FAIL;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ADDR_MISALIGNED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_BLOCK_LEN_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ERASE_SEQ_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_BAD_ERASE_PARAM;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_COM_CRC_FAILED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ILLEGAL_CMD;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CARD_ECC_FAILED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CC_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CID_CSD_OVERWRITE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_WP_ERASE_SKIP;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CARD_ECC_DISABLED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ERASE_RESET;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_AKE_SEQ_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_CRC_FAIL;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_CRC_FAIL;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_CRC_FAIL;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_ILLEGAL_CMD;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_COM_CRC_FAILED;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):      return SDMMC_ERROR_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
Stm32f7xx_ll_sdmmc.c (drivers\stm32f7xx_hal_driver\src):  return SDMMC_ERROR_NONE;
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_NONE                     ((uint32_t)0x00000000U)   /*!< No error                                                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CMD_CRC_FAIL             ((uint32_t)0x00000001U)   /*!< Command response received (but CRC check failed)              */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_DATA_CRC_FAIL            ((uint32_t)0x00000002U)   /*!< Data block sent/received (CRC check failed)                   */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CMD_RSP_TIMEOUT          ((uint32_t)0x00000004U)   /*!< Command response timeout                                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_DATA_TIMEOUT             ((uint32_t)0x00000008U)   /*!< Data timeout                                                  */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_TX_UNDERRUN              ((uint32_t)0x00000010U)   /*!< Transmit FIFO underrun                                        */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_RX_OVERRUN               ((uint32_t)0x00000020U)   /*!< Receive FIFO overrun                                          */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_ADDR_MISALIGNED          ((uint32_t)0x00000040U)   /*!< Misaligned address                                            */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_BLOCK_LEN_ERR            ((uint32_t)0x00000080U)   /*!< Transferred block length is not allowed for the card or the 
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_ERASE_SEQ_ERR            ((uint32_t)0x00000100U)   /*!< An error in the sequence of erase command occurs              */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_BAD_ERASE_PARAM          ((uint32_t)0x00000200U)   /*!< An invalid selection for erase groups                         */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_WRITE_PROT_VIOLATION     ((uint32_t)0x00000400U)   /*!< Attempt to program a write protect block                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_LOCK_UNLOCK_FAILED       ((uint32_t)0x00000800U)   /*!< Sequence or password error has been detected in unlock 
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_COM_CRC_FAILED           ((uint32_t)0x00001000U)   /*!< CRC check of the previous command failed                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_ILLEGAL_CMD              ((uint32_t)0x00002000U)   /*!< Command is not legal for the card state                       */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CARD_ECC_FAILED          ((uint32_t)0x00004000U)   /*!< Card internal ECC was applied but failed to correct the data  */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CC_ERR                   ((uint32_t)0x00008000U)   /*!< Internal card controller error                                */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_GENERAL_UNKNOWN_ERR      ((uint32_t)0x00010000U)   /*!< General or unknown error                                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_STREAM_READ_UNDERRUN     ((uint32_t)0x00020000U)   /*!< The card could not sustain data reading in stream rmode       */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_STREAM_WRITE_OVERRUN     ((uint32_t)0x00040000U)   /*!< The card could not sustain data programming in stream mode    */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CID_CSD_OVERWRITE        ((uint32_t)0x00080000U)   /*!< CID/CSD overwrite error                                       */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_WP_ERASE_SKIP            ((uint32_t)0x00100000U)   /*!< Only partial address space was erased                         */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_CARD_ECC_DISABLED        ((uint32_t)0x00200000U)   /*!< Command has been executed without using internal ECC          */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_ERASE_RESET              ((uint32_t)0x00400000U)   /*!< Erase sequence was cleared before executing because an out 
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_AKE_SEQ_ERR              ((uint32_t)0x00800000U)   /*!< Error in sequence of authentication                           */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_INVALID_VOLTRANGE        ((uint32_t)0x01000000U)   /*!< Error in case of invalid voltage range                        */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_ADDR_OUT_OF_RANGE        ((uint32_t)0x02000000U)   /*!< Error when addressed block is out of range                    */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_REQUEST_NOT_APPLICABLE   ((uint32_t)0x04000000U)   /*!< Error when command request is not applicable                  */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_INVALID_PARAMETER        ((uint32_t)0x08000000U)   /*!< the used parameter is not valid                               */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_UNSUPPORTED_FEATURE      ((uint32_t)0x10000000U)   /*!< Error when feature is not insupported                         */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_BUSY                     ((uint32_t)0x20000000U)   /*!< Error when transfer process is busy                           */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_DMA                      ((uint32_t)0x40000000U)   /*!< Error while DMA transfer                                      */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_ERROR_TIMEOUT                  ((uint32_t)0x80000000U)   /*!< Timeout error                                                 */
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_OCR_CC_ERROR                 ((uint32_t)0x00100000U)
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_OCR_GENERAL_UNKNOWN_ERROR    ((uint32_t)0x00080000U)
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_OCR_AKE_SEQ_ERROR            ((uint32_t)0x00000008U)
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_OCR_ERRORBITS                ((uint32_t)0xFDFFE008U)
Stm32f7xx_ll_sdmmc.h (drivers\stm32f7xx_hal_driver\inc):#define SDMMC_R6_GENERAL_UNKNOWN_ERROR     ((uint32_t)0x00002000U)
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: SPI registers are not de-initialized
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  *         SPI IP should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: SPI registers are not de-initialized
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  *         SPI IP should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: SPI registers are not Initialized
Stm32f7xx_ll_spi.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: invalid TIMx instance
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):    result = ERROR;
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: TIMx output channel is not initialized
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus result = ERROR;
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: TIMx output channel is not initialized
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus result = ERROR;
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_tim.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: not applicable
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: USART registers are not de-initialized
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  *         USART IP should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Problem occurred during USART Registers initialization
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  ErrorStatus status = ERROR;
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):      /* Nothing to do, as error code is already assigned to ERROR value */
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  /* Endif (=> USART not in Disabled state => return ERROR) */
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  *         USART IP should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Problem occurred during USART Registers initialization
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):  /* Else (USART not in Disabled state => return ERROR */
Stm32f7xx_ll_usart.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
Stm32f7xx_ll_usart.h (drivers\stm32f7xx_hal_driver\inc):__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
Stm32f7xx_ll_usb.h (drivers\stm32f7xx_hal_driver\inc):  URB_ERROR,
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Max frequency configuration not done
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Max frequency configuration not done
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Latency cannot be modified
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):      status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: PLL is busy
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):    status = ERROR;
Stm32f7xx_ll_utils.c (drivers\stm32f7xx_hal_driver\src):  *          - ERROR: Problem to switch system to PLL
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define HAL_ADC_STATE_ERROR             HAL_ADC_STATE_ERROR_INTERNAL
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_NONE              HAL_FLASH_ERROR_NONE
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_RD                HAL_FLASH_ERROR_RD
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_PG                HAL_FLASH_ERROR_PROG
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_PGP               HAL_FLASH_ERROR_PGS
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_WRP               HAL_FLASH_ERROR_WRP
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_OPTV              HAL_FLASH_ERROR_OPTV
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_OPTVUSR           HAL_FLASH_ERROR_OPTVUSR
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_PROG              HAL_FLASH_ERROR_PROG
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_OP                HAL_FLASH_ERROR_OPERATION
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_PGA               HAL_FLASH_ERROR_PGA
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_SIZE              HAL_FLASH_ERROR_SIZE
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_SIZ               HAL_FLASH_ERROR_SIZE
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_PGS               HAL_FLASH_ERROR_PGS
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_MIS               HAL_FLASH_ERROR_MIS
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_FAST              HAL_FLASH_ERROR_FAST
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_FWWERR            HAL_FLASH_ERROR_FWWERR
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_NOTZERO           HAL_FLASH_ERROR_NOTZERO
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_OPERATION         HAL_FLASH_ERROR_OPERATION
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define FLASH_ERROR_ERS               HAL_FLASH_ERROR_ERS
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define NOR_ERROR                      HAL_NOR_STATUS_ERROR
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define PCCARD_ERROR                  HAL_PCCARD_STATUS_ERROR
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define HAL_DCMI_ERROR_OVF      HAL_DCMI_ERROR_OVR
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define __HAL_ADC_CLEAR_ERRORCODE                        ADC_CLEAR_ERRORCODE
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define __HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER     __HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE
Stm32_hal_legacy.h (drivers\stm32f7xx_hal_driver\inc\legacy):#define __HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER    __HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE
